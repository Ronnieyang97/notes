1、UDP和TCP的特点与区别
用户数据包协议UDP，是无连接的尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加UDP首部），支持一对一、一对多、多对一和多对多的交互通信。
传输控制协议（TCP），是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条TCP连接只能是点对点的（一对一）

UDP、TCP首部格式
UDP首部只有八个字节包括源端口、目的端口、长度、检验和，12字节的伪首部是为了计算检验和临时添加的。
TCP首部较复杂：
序号：用于对字节流进行编号，如序号为301，携带100字节，则下一报文的序号应为401
确认号：期望收到的下个报文段的序号，在上例中的确认号为401
数据偏移：首部的长度
控制位：八位从左到右分别是CWR\ECE\URG\ACK\PSH\RST\SYN\FIN
CWR:CWR标志与ECE标志都用于IP首部的ECN字段，ECE标志为1时则通知对方已将拥塞窗口缩小
ECE：若值为1则会通知对方，从对方到这边的网络有阻塞。在收到数据包的IP首部中ECN为1时将TCP首部中的ECE设为1
URG：该位设为1表示包中有需要紧急处理的数据，对于需要紧急处理的数据，与紧急指针有关
ACK：该位设为1表示确认应答的字段有效，TCP规定除了最初建立连接时的SYN包之外该位必须设为1
PSH：该位设为1表示需要将收到的数据立刻上传给上层应用协议，若设为0则先将数据进行缓存
RST：该位设为1表示TCP连接出现异常必须强制断开连接
SYN：用于建立连接，该位设为1，表示希望建立连接，并在其序列号的字段进行序列号初值设定
FIN：该位设为1，表示今后不再有数据发送希望断开连接，当通信结束希望断开连接时，通信双方的主机之间就可以相互交换FIN位置为1的TCP段。（每个主机对对方的FIN包进行确认应答后可以断开连接，不过主机收到FIN值设为1的TCP段后不必马上回复一个FIN包，而是可以等到缓冲区中所有数据都因为已成功发送而被自动删除后再发FIN包）
窗口：窗口值作为接收方让发送方设置其发送窗口的依据，因为接收方的数据缓存空间是有限的

3、TCP的三次握手和四次挥手
TCP是一种面向面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接，即客户端和服务器内存中保存一份关于对方的信息，如IP地址、端口号。
TCP可以看成字节流，处理IP层或以下层的丢包、重复以及错误问题，在建立连接的过程中双方需要交换一些连接的参数，这些参数放在TCP头部。
TCP采用三次握手建立连接，四次挥手关闭连接。
一个TCP连接由一个4元组构成，分别是两个IP地址和两个端口号。当TCP接收到另一端的数据时，会发送一个确认（存在延迟）。ACK是累积的，一个确认字节号N的ACK表示直到N的字节已经成功被接收了。一个完整的TCP连接是双向和对称的，数据可以在两个方向上平等的流动，给上层应用程序提供一种双工服务，一旦建立连接，这个连接的一个方向上的每个TCP报文段都包含了相反方向上的一个ACK。序列号使TCP接收端能丢弃重复的报文段，IP不提供重复消除或次序保证正确。TCP是字节流协议，可以保证数据次序的准确。

4、TCP的三次握手
A为客户端B为服务器端。
①A向B发送请求报文，SYN=1，ACK=0，选择初始序号x。
②B收到连接请求报文，如果同意连接则向A发送连接确认报文，SYN=1，ACK=1，确认号为x+1，同时也选择一个初始序号y。
③A在收到B的连接确认报文后，要向B发出确认，确认号为x+1，序号为y+1。B收到A的确认后，连接建立。
第一次服务端确认客户端的发送能力、服务端的接受能力；第二次客户端确认服务端的接收、发送能力和客户端的接受发送能力；第三次服务端确认服务端的接收、发送能力和客户端的接受发送能力。

5、TCP的四次挥手
A为客户端B为服务器端。
①A发送一个FIN段，并包含希望接收者看到的自己当前的序列号K，同时包含一个ACK表示确认对方最近一次发过来的数据。
②B将k+1作为ACK序号值表明收到了上一个包。这时上层的应用程序会被告知另一端发起了关闭操作，使应用程序发起自己的关闭操作
③B发起自己的FIN段，ACK=K+1，Seq=L
④A确认进入time-wait，等待2*MSL（最大报文存活时间）后释放连接，ACK=L+1
TCP连接是双向传输的对等的模式，当有一方要关闭连接时会发送指令。这时对方会回一个ACK，此时一个方向的连接关闭，但另一个方向仍然可以继续传输数据，因此该方向上会发送完所有数据后，发送一个FIN段来关闭此方向上的连接。这个就是close-wait阶段。

6、TCP短连接和长连接的区别
短连接客户端向服务端发送消息，服务端回应，然后一次读写就完成了，双方都可发起关闭操作，一般只在两者间传递一次读写操作。管理简单，不需要额外控制手段。
长连接客户端与服务端完成一次读写后，连接不主动关闭，后续读写会继续使用这个连接,此场景下客户端一般不会主动关闭连接，服务端会关闭一些长时间没有读写的连接

7、TCP粘包、拆包
UDP是基于报文发动的，首部会指示UDP数据报文的长度，因此应用层能将其区分，避免粘包和拆包问题
TCP基于字节流，无法将数据块分边界、首部也不表示数据长度。
接收端只收到一个数据包，但其中包含发送端发送的两个数据包的信息，即为粘包。
当发送数据大于TCP发送缓冲区剩余大小就会发生拆包；待发送数据大于MSS（最报文长度），TCP在传输前将进行拆包
要发送的数据小于TCP缓冲区大小，TCP将多次写入缓冲区的数据，一次性发送出去，会发生粘包；接数据端的应用层没有即使读取缓冲区中的数据会发生粘包
消息定长：发送端将每个数据包封装为固定长度，这样接收端每次接收缓冲区中读取固定长度的数据就自然把每个数据包拆分开
设置消息边界：服务端从网络流中按消息分离出消息内容。在包尾增加回车换行符进行分割。如FTP协议
将消息分为消息头和消息体：消息头中包含表示消息总长的字段

8、TCP可靠传输
基于超时重传，如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段

9、TCP滑动窗口
窗口是缓存的一部分，用来暂时存放字节流，发送方和接收方各有一个窗口，TCP接受方通过TCP报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值设置自己的窗口大小。
发送窗口内的字节都允许被发送，接受窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送且收到确认，那么将发送窗口右滑一定距离，直到左部第一个字节不是已发送并且已确认的阶段；接受滑动窗口类似。
接受窗口会对窗口内最后一个按序到达的字节进行确认。

10、TCP流量控制
流量控制是为了控制发送方发送速率，保证接收方来得及接收。发送端主机会是不是发送一个窗口探测的数据段来获取最新的窗口大小信息。

11、TCP拥塞控制
如果网络出现拥塞，分组会丢失，发送方继续重传，导致拥塞加剧。TCP主要通过四个算法进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。
发送最初执行慢开始，cwnd=1，收到确认后将cwnd加倍，设置门限ssthresh当cwnd>=ssthresh时，进入拥塞避免，每个轮次cwnd+1，如果出现超时，令ssthresh=cwmd/2，重新执行慢开始。
在接收方，要求每次都对最后一个已收到的有序报文进行确认，在发送方如果收到三个重复确认那么可以知道下一个报文段丢失，此时执行快重传立即重传下个报文段。
在这种情况下只是丢失个别报文段，不是网络拥塞，因此执行快恢复，ssthresh，cwnd=ssthresh，直接进入拥塞避免。

12、提供网络利用率
1）nagle算法：当满足已发送的数据都已经收到确认应答或可以发送最大段长度的数据时，持续数据发送，若都不满足则将等待一段时间再发送
2）延迟确认应答：接收方收到数据后可以不立即确认应答，而是延迟一段时间。在没有收到2*最大段长度的数据位置不做确认应答；在其他情况下，最大延迟0.5秒发送确认应答；TCP文件传输中，大多数是每两个数据段返回一次确认应答。
3）在一个TCP包中既发送数据又发送确认应答的一种机制，必须等到应用处理完数据并将作为回执的数据返回为止。










